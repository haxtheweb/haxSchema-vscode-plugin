{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "HAXSchema",
  "scopeName": "source.haxschema",
  "patterns": [
    {
      "include": "#value"
    }
  ],
  "repository": {
    "array": {
      "begin": "\\[",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.array.begin.haxschema"
        }
      },
      "end": "\\]",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.array.end.haxschema"
        }
      },
      "name": "meta.structure.array.haxschema",
      "patterns": [
        {
          "include": "#value"
        },
        {
          "match": ",",
          "name": "punctuation.separator.array.haxschema"
        },
        {
          "match": "[^\\s\\]]",
          "name": "invalid.illegal.expected-array-separator.haxschema"
        }
      ]
    },
    "constant": {
      "match": "\\b(?:true|false|null)\\b",
      "name": "constant.language.haxschema"
    },
    "number": {
      "match": "(?x:         # turn on extended mode\n                     -?         # an optional minus\n                     (?:\n                       0        # a zero\n                       |        # ...or...\n                       [1-9]    # a 1-9 character\n                       \\d*      # followed by zero or more digits\n                     )\n                     (?:\n                       (?:\n                         \\.     # a period\n                         \\d+    # followed by one or more digits\n                       )?\n                       (?:\n                         [eE]   # an e character\n                         [+-]?  # followed by an option +/-\n                         \\d+    # followed by one or more digits\n                       )?       # make exponent optional\n                     )?         # make decimal portion optional\n                   )",
      "name": "constant.numeric.haxschema"
    },
    "object": {
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.dictionary.begin.haxschema"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.dictionary.end.haxschema"
        }
      },
      "name": "meta.structure.dictionary.haxschema",
      "patterns": [
        {
          "comment": "the HAXSchema object key",
          "include": "#objectkey"
        },
        {
          "include": "#comments"
        },
        {
          "begin": ":",
          "beginCaptures": {
            "0": {
              "name": "punctuation.separator.dictionary.key-value.haxschema"
            }
          },
          "end": "(,)|(?=\\})",
          "endCaptures": {
            "1": {
              "name": "punctuation.separator.dictionary.pair.haxschema"
            }
          },
          "name": "meta.structure.dictionary.value.haxschema",
          "patterns": [
            {
              "comment": "the HAXSchema object value",
              "include": "#value"
            },
            {
              "match": "[^\\s,]",
              "name": "invalid.illegal.expected-dictionary-separator.haxschema"
            }
          ]
        },
        {
          "match": "[^\\s\\}]",
          "name": "invalid.illegal.expected-dictionary-separator.haxschema"
        }
      ]
    },
    "string": {
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.haxschema"
        }
      },
      "end": "\"",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.haxschema"
        }
      },
      "name": "string.quoted.double.haxschema",
      "patterns": [
        {
          "include": "#stringcontent"
        }
      ]
    },
    "objectkey": {
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.support.type.property-name.begin.haxschema"
        }
      },
      "end": "\"",
      "endCaptures": {
        "0": {
          "name": "punctuation.support.type.property-name.end.haxschema"
        }
      },
      "name": "string.haxschema support.type.property-name.haxschema",
      "patterns": [
        {
          "include": "#stringcontent"
        }
      ]
    },
    "stringcontent": {
      "patterns": [
        {
          "match": "(?x:                # turn on extended mode\n                           \\\\                # a literal backslash\n                           (?:               # ...followed by...\n                             [\"\\\\/bfnrt]     # one of these characters\n                             |               # ...or...\n                             u               # a u\n                             [0-9a-fA-F]{4}  # and four hex digits\n                           )\n                         )",
          "name": "constant.character.escape.haxschema"
        },
        {
          "match": "\\\\.",
          "name": "invalid.illegal.unrecognized-string-escape.haxschema"
        }
      ]
    },
    "value": {
      "patterns": [
        {
          "include": "#constant"
        },
        {
          "include": "#number"
        },
        {
          "include": "#string"
        },
        {
          "include": "#array"
        },
        {
          "include": "#object"
        },
        {
          "include": "#comments"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "match": "/\\*\\*(?!/)",
          "name": "punctuation.definition.comment.haxschema",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.haxschema"
            }
          },
          "begin": "/\\*\\*(?!/)",
          "end": "\\*/",
          "name": "comment.block.documentation.haxschema"
        },
        {
          "begin": "/\\*",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.haxschema"
            }
          },
          "end": "\\*/",
          "name": "comment.block.haxschema"
        },
        {
          "captures": {
            "1": {
              "name": "punctuation.definition.comment.haxschema"
            }
          },
          "match": "(//).*$\\n?",
          "name": "comment.line.double-slash.haxschema"
        }
      ]
    }
  }
}
